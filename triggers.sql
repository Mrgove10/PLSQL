----------TRIGGERS----------
--TRIGER INSERT TJOB
CREATE
    OR REPLACE TRIGGER TJOB_ON_INSERT
    BEFORE
        INSERT
    ON TJOB
    FOR EACH ROW
BEGIN
    INSERT INTO TJOB_LOGS(MESSAGE, EXECTIME)
    VALUES ('INSERT JOB SUCCESS', SYSDATE);
    --
    SELECT TJOB_SEC.nextval
    INTO :new.ID_TJOB
    FROM dual;
END;
/
--TRIGER INSERT TJOB_EXEC_HISTO
CREATE
    OR REPLACE TRIGGER TJOBEXEC_HISTO_ON_INSERT
    BEFORE
        INSERT
    ON TJOB_EXEC_HISTO
    FOR EACH ROW
BEGIN
    INSERT INTO TJOB_LOGS(MESSAGE, EXECTIME)
    VALUES ('INSERT JOBEXEC SUCCESS', SYSDATE);
    --
    SELECT TJOB_EXEC_HISTO_SEC.nextval
    INTO :new.ID_TJOB_EXEC_HISTO
    FROM dual;
END;
/
--TRIGER INSERT TJOB_LOGS
CREATE
    OR REPLACE TRIGGER TJOB_LOGS_ON_INSERT
    BEFORE
        INSERT
    ON TJOB_LOGS
    FOR EACH ROW
BEGIN
    -- can't create an insert into logs cause it creates and infinit loop
    SELECT TJOB_LOGS_SEC.nextval
    INTO :new.ID_TJOB_LOGS
    FROM dual;
END;
/
--TRIGER INSERT TERROR
CREATE
    OR REPLACE TRIGGER TERROR_ON_INSERT
    BEFORE
        INSERT
    ON TERRORS
    FOR EACH ROW
BEGIN
    INSERT INTO TJOB_LOGS(MESSAGE, EXECTIME)
    VALUES ('INSERT ERROR SUCCESS', SYSDATE);
    --
    SELECT TERROR_SEC.nextval
    INTO :new.ID_TERROR
    FROM dual;
END;
/
---------------------------------------
--TRIGGER INSERT ACTEUR
CREATE
    OR REPLACE TRIGGER ACTEUR_ON_INSERT
    BEFORE
        INSERT
    ON ACTEUR
    FOR EACH ROW
BEGIN
    --this doesnt work because its oracle of corse ... normaly you put this on every insert but it juste bugs cause yeah you know..
    --INSERT INTO TJOB_LOGS(MESSAGE, EXECTIME)
    --VALUES ('INSERT ACTEUR SUCCESS', SYSDATE);
    SELECT ACTEUR_SEC.nextval
    INTO :new.ID_ACTEUR
    FROM dual;
END;
/
CREATE OR REPLACE TRIGGER ACTEUR_ON_CHANGE_TRIGGER
    AFTER INSERT OR UPDATE OR DELETE
    ON ACTEUR
DECLARE
    log_action TJOB_LOGS.MESSAGE%TYPE;
BEGIN
    IF INSERTING THEN
        log_action := 'Insert in ACTEUR';
    ELSIF UPDATING THEN
        log_action := 'Update in ACTEUR';
    ELSIF DELETING THEN
        log_action := 'Delete in ACTEUR';
    ELSE
        DBMS_OUTPUT.PUT_LINE('This code is not reachable.');
    END IF;

    INSERT INTO TJOB_LOGS(MESSAGE, EXECTIME)
    VALUES (log_action, SYSDATE);
END;
/

--TRIGGER INSERT CINEMA
CREATE
    OR REPLACE TRIGGER CINEMA_ON_INSERT
    BEFORE
        INSERT
    ON CINEMA
    FOR EACH ROW
BEGIN
    SELECT CINEMA_SEC.nextval
    INTO :new.ID_CINE
    FROM dual;
END;
/
CREATE OR REPLACE TRIGGER CINEMA_ON_CHANGE_TRIGGER
    AFTER INSERT OR UPDATE OR DELETE
    ON CINEMA
DECLARE
    log_action TJOB_LOGS.MESSAGE%TYPE;
BEGIN
    IF INSERTING THEN
        log_action := 'Insert in CINEMA';
    ELSIF UPDATING THEN
        log_action := 'Update in CINEMA';
    ELSIF DELETING THEN
        log_action := 'Delete in CINEMA';
    ELSE
        DBMS_OUTPUT.PUT_LINE('This code is not reachable.');
    END IF;

    INSERT INTO TJOB_LOGS(MESSAGE, EXECTIME)
    VALUES (log_action, SYSDATE);
END;
/

--TRIGGER INSERT FILM
CREATE
    OR REPLACE TRIGGER FILM_ON_INSERT
    BEFORE
        INSERT
    ON FILM
    FOR EACH ROW
BEGIN
    SELECT FILM_SEC.nextval
    INTO :new.ID_FILM
    FROM dual;
END;
/
CREATE OR REPLACE TRIGGER FILM_ON_CHANGE_TRIGGER
    AFTER INSERT OR UPDATE OR DELETE
    ON FILM
DECLARE
    log_action TJOB_LOGS.MESSAGE%TYPE;
BEGIN
    IF INSERTING THEN
        log_action := 'Insert in FILM';
    ELSIF UPDATING THEN
        log_action := 'Update in FILM';
    ELSIF DELETING THEN
        log_action := 'Delete in FILM';
    ELSE
        DBMS_OUTPUT.PUT_LINE('This code is not reachable.');
    END IF;

    INSERT INTO TJOB_LOGS(MESSAGE, EXECTIME)
    VALUES (log_action, SYSDATE);
END;
/

--TRIGGER INSERT ACTEUR_FILM
CREATE
    OR REPLACE TRIGGER ACTEUR_FILM_ON_INSERT
    BEFORE
        INSERT
    ON ACTEUR_FILM
    FOR EACH ROW
BEGIN
    SELECT ACTEUR_FILM_SEC.nextval
    INTO :new.ID_ACTEUR_FILM
    FROM dual;
END;
/
CREATE OR REPLACE TRIGGER ACTEUR_FILM_ON_CHANGE_TRIGGER
    AFTER INSERT OR UPDATE OR DELETE
    ON ACTEUR_FILM
DECLARE
    log_action TJOB_LOGS.MESSAGE%TYPE;
BEGIN
    IF INSERTING THEN
        log_action := 'Insert in ACTEUR_FILM';
    ELSIF UPDATING THEN
        log_action := 'Update in ACTEUR_FILM';
    ELSIF DELETING THEN
        log_action := 'Delete in ACTEUR_FILM';
    ELSE
        DBMS_OUTPUT.PUT_LINE('This code is not reachable.');
    END IF;

    INSERT INTO TJOB_LOGS(MESSAGE, EXECTIME)
    VALUES (log_action, SYSDATE);
END;
/

--TRIGGER INSERT SEANCE
CREATE
    OR REPLACE TRIGGER SEANCE_ON_INSERT
    BEFORE
        INSERT
    ON SEANCE
    FOR EACH ROW
BEGIN
    SELECT SEANCE_SEC.nextval
    INTO :new.ID_SEANCE
    FROM dual;
END;
/
CREATE OR REPLACE TRIGGER SEANCE_ON_CHANGE_TRIGGER
    AFTER INSERT OR UPDATE OR DELETE
    ON SEANCE
DECLARE
    log_action TJOB_LOGS.MESSAGE%TYPE;
BEGIN
    IF INSERTING THEN
        log_action := 'Insert in SEANCE';
    ELSIF UPDATING THEN
        log_action := 'Update in SEANCE';
    ELSIF DELETING THEN
        log_action := 'Delete in SEANCE';
    ELSE
        DBMS_OUTPUT.PUT_LINE('This code is not reachable.');
    END IF;

    INSERT INTO TJOB_LOGS(MESSAGE, EXECTIME)
    VALUES (log_action, SYSDATE);
END;
/

--TRIGGER INSERT ACHAT_BILLET
CREATE
    OR REPLACE TRIGGER ACHAT_BILLET_ON_INSERT
    BEFORE
        INSERT
    ON ACHAT_BILLET
    FOR EACH ROW
BEGIN
    SELECT ACHAT_BILLET_SEC.nextval
    INTO :new.ID_ACHAT
    FROM dual;
END;
/
CREATE OR REPLACE TRIGGER ACHAT_BILLET_ON_CHANGE_TRIGGER
    AFTER INSERT OR UPDATE OR DELETE
    ON ACHAT_BILLET
DECLARE
    log_action TJOB_LOGS.MESSAGE%TYPE;
BEGIN
    IF INSERTING THEN
        log_action := 'Insert in ACHAT_BILLET';
    ELSIF UPDATING THEN
        log_action := 'Update in ACHAT_BILLET';
    ELSIF DELETING THEN
        log_action := 'Delete in ACHAT_BILLET';
    ELSE
        DBMS_OUTPUT.PUT_LINE('This code is not reachable.');
    END IF;

    INSERT INTO TJOB_LOGS(MESSAGE, EXECTIME)
    VALUES (log_action, SYSDATE);
END;
/